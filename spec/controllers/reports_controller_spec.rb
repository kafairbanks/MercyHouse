require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ReportsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Mercyroom. As you add validations to Mercyroom, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
        mhomeid: '1',
        dstart: '2019-03-01',
        dend: '2019-05-01',
    }
  }

  let(:invalid_attributes) {
    {
        mhomeid: nil,
        dstart: '2019-03-01',
        dend: '2019-04-01',
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MercyroomsController. Be sure to keep this updated too.
  let(:valid_session) { {
      user_id: 1,
      user_role: 'admin'
  } }

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "POST #create" do

    context "with valid params" do
      it "downloads a report" do
        post :create, params: {report: valid_attributes}, session: valid_session
        expect(response).to redirect_to(report_download_path(Report.last))
      end
    end

    context "with invalid params" do
      it "redirects to the new report page" do
        post :create, params: {report: invalid_attributes}, session: valid_session
        expect(response).to redirect_to(new_report_path)
        expect(controller.notice).to eq("Download failed.")
      end
    end
  end

  describe "GET #download" do

    context "with valid params" do
      it "succeeds" do
        report = Report.create! valid_attributes
        get :download, params: {id: report.to_param}, session: valid_session
        expect(response).to redirect_to(new_report_path)
        expect(controller.notice).to eq('Download complete.')
      end
    end

    context "with invalid params" do
      it "fails" do
        get :download, params: {id: 'bad'}, session: valid_session
        expect(controller.notice).to eq('Download failed.')
      end
    end
  end
end
