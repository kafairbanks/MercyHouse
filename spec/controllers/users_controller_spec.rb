
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Applicant. As you add validations to Applicant, be sure to
  # adjust the attributes here as well.

  let (:valid_attributes) {{
      provider: "facebook",
      uid: 110786543532741,
      role: "user"
  }}

  let (:index_attributes0) {{
      role: "user"
  }}

  let(:index_attributes) {{
      commit: 'Clear',
      name: User.last.name
  }}

  let(:index_attributes2) {{
      name: "Nick Nelson"
  }}

  let (:invalid_attributes) {{
      provider: "facebook",
      uid: 110786543532741,
      role: nil
  }}

  let(:update_attributes) {
    {
        role: "admin"
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ApplicantsController. Be sure to keep this updated too.
  let(:admin_session) { {
      user_id: 1,
      user_role: 'admin'
  } }

  let(:user_session) { {
      user_id: 7,
      user_role: 'plebeian'
  } }

  describe "GET #index" do
    context "without params" do
      it "returns a success response" do
        User.create! valid_attributes
        get :index, params: index_attributes0, session: admin_session
        expect(response).to be_successful
      end
    end

    context "with clear params" do
      it "returns a success response" do
        User.create! valid_attributes
        get :index, params: index_attributes, session: admin_session
        expect(response).to be_successful
      end
    end

    context "with search params" do
      it "returns a success response" do
        User.create! valid_attributes
        get :index, params: index_attributes2, session: admin_session
        expect(response).to be_successful
      end
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      user = User.create! valid_attributes
      get :show, params: {id: user.to_param}, session: admin_session
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    context "as an admin" do
      it "returns a success response" do
        user = User.create! valid_attributes
        get :edit, params: {id: user.to_param}, session: admin_session
        expect(response).to be_successful
      end
    end

    context "as wrong user" do
      it "returns a success response" do
        user = User.create! valid_attributes
        get :edit, params: {id: user.to_param}, session: user_session
        expect(response).to redirect_to(show_dash_path)
      end
    end
  end


  describe "PUT #update" do
    context "with valid params" do

      it "updates the requested applicant" do
        user = User.create! valid_attributes
        put :update, params: {id: user.to_param, user: update_attributes}, session: admin_session
        user.reload
        # expect(response).to be_successful
        expect(controller.notice).to eq('User was successfully updated.')
      end

      it "redirects to the applicant" do
        user = User.create! valid_attributes
        put :update, params: {id: user.to_param, user: update_attributes}, session: admin_session
        expect(response).to redirect_to(user)
      end
    end
  end

end
