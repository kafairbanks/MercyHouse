require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ApplicationsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Application. As you add validations to Application, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      applicants_id: 1,
      HospitalName: 'Mercy',
      DoctorName: 'Dr. Schulls',
      appliedForLongTermHousing: false,
      isFirstVisit: false,
      wantsInfo: false,
      insuranceCoversHousing: false,
      ArrivalDate: '2023-06-08',
      DepartureDate: '2023-06-15'
    }
  }

  let(:valid_attributes2) {
    {
        HospitalName: 'Mercy',
        DoctorName: 'Dr. Schulls',
        appliedForLongTermHousing: false,
        isFirstVisit: false,
        wantsInfo: false,
        insuranceCoversHousing: false,
        ArrivalDate: '2023-06-08',
        DepartureDate: '2023-06-15',
        redFlag: true
    }
  }

  let(:index_attributes) {{
      commit: 'Clear',
      name: Applicant.last.AName
  }}

  let(:index_attributes2) {{
      name: Applicant.last.AName
  }}

  let(:invalid_attributes) {{
      applicants_id: '1',
      HospitalName: nil,
      DoctorName: 'Dr. Schulls',
      appliedForLongTermHousing: false,
      isFirstVisit: false,
      wantsInfo: false,
      insuranceCoversHousing: false,
      ArrivalDate: '2023-06-08',
      DepartureDate: '2023-06-15'
  }}

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ApplicationsController. Be sure to keep this updated too.
  let(:valid_session) { {
      user_id: 1,
      user_role: 'admin',
      applicants_id: 1
  } }

  let(:valid_session2) {{
      user_id: 1,
      user_role: 'admin',
      applicants_id: 2
  }}


  describe "GET #index" do
    context "without params" do
      it "returns a success response" do
        application = Application.create! valid_attributes
        get :index, params: {}, session: valid_session
        expect(response).to be_successful
      end
    end

    context "with clear params" do
      it "returns a success response" do
        application = Application.create! valid_attributes
        get :index, params: index_attributes, session: valid_session
        expect(response).to be_successful
      end
    end

    context "with search params" do
      it "returns a success response" do
        application = Application.create! valid_attributes
        get :index, params: index_attributes2, session: valid_session
        expect(response).to be_successful
      end
    end

  end

  describe "GET #show" do
    it "returns a success response" do
      application = Application.create! valid_attributes
      get :show, params: {id: application.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      application = Application.create! valid_attributes
      get :edit, params: {id: application.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Application" do
        expect {
          post :create, params: {application: valid_attributes}, session: valid_session
        }.to change(Application, :count).by(1)
      end

      it "redirects to the created application" do
        post :create, params: {application: valid_attributes}, session: valid_session
        expect(response).to redirect_to(success_path)
      end
    end

    context "with valid params excluding application id" do
      it "creates a new Application" do
        expect {
          post :create, params: {application: valid_attributes2}, session: valid_session
        }.to change(Application, :count).by(1)
      end

      it "redirects to the created application" do
        post :create, params: {application: valid_attributes2}, session: valid_session2
        expect(response).to redirect_to(success_path)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {application: invalid_attributes}, session: valid_session
        expect(response).to render_template(:new)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {{
            applicants_id: 1,
            HospitalName: 'Blank Children\'s',
            DoctorName: 'Dr. Schulls',
            appliedForLongTermHousing: false,
            isFirstVisit: false,
            wantsInfo: false,
            insuranceCoversHousing: false,
            ArrivalDate: '2023-06-08',
            DepartureDate: '2023-06-15'
      }}

      it "updates the requested application" do
        application = Application.create! valid_attributes
        put :update, params: {id: application.to_param, application: new_attributes}, session: valid_session
        application.reload
        expect(controller.notice).to eq('Application was successfully updated.')
      end

      it "redirects to the application" do
        application = Application.create! valid_attributes
        put :update, params: {id: application.to_param, application: new_attributes}, session: valid_session
        expect(response).to redirect_to(application)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        application = Application.create! valid_attributes
        put :update, params: {id: application.to_param, application: invalid_attributes}, session: valid_session
        expect(response).to render_template(:edit)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested application" do
      application = Application.create! valid_attributes
      expect {
        delete :destroy, params: {id: application.to_param}, session: valid_session
      }.to change(Application, :count).by(-1)
    end

    it "destroys associated booking application" do
      application = Application.create! valid_attributes
      booking_attributes =
        { applicants_id: application.applicants_id,
          application_id: application.id,
          mercyrooms_id: '1',
          StartDate: application.ArrivalDate,
          EndDate: application.DepartureDate }
      Booking.create! booking_attributes
      expect {
        delete :destroy, params: {id: application.to_param}, session: valid_session
      }.to change(Booking, :count).by(-1)
    end

    it "redirects to the applications list" do
      application = Application.create! valid_attributes
      delete :destroy, params: {id: application.to_param}, session: valid_session
      expect(response).to redirect_to(applications_url)
    end
  end

end