
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ApplicantsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Applicant. As you add validations to Applicant, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      AName: "Alex Davis",
      AEmail: "AlexDavy@dishmail.heroku",
      AMinor: false,
      SPHomePhone: "5154143113",
      SPAddress: "907 Cross Street",
      SPCity: "College Station",
      SPState: "TX",
      SPZip: "77840",
      SPEmail: "itsjeff@hotmail.net",
      BackgroundCheckCompleted: true,
      BackgroundCheckDate: '2019-04-08'
    }
  }

  let(:index_attributes){{
      name: "Alex Davis"
  }}

  let(:invalid_attributes) {
    {
        AName: nil,
        AEmail: nil,
        AMinor: "string",
        SPHomePhone: nil,
        SPAddress: false,
        SPCity: "College Station",
        SPState: "TX",
        SPZip: "77840",
        SPEmail: "itsjeff@hotmail.net"
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ApplicantsController. Be sure to keep this updated too.
  let(:admin_session) { {
      user_id: 1,
      user_role: 'admin'
  } }

  let(:user_session) { {
      user_id: 7,
      user_role: 'plebeian'
  } }

  let(:user_session2) { {
      user_id: 7,
      user_role: 'plebeian',
      applicantsid: 2
  } }

  describe "GET #index" do
    context "without params" do
      it "returns a success response" do
        applicant = Applicant.create! valid_attributes
        get :index, params: {}, session: admin_session
        expect(response).to be_successful
      end
    end

    context "with params" do
      it "returns a success response" do
        applicant = Applicant.create! valid_attributes
        get :index, params: index_attributes, session: admin_session
        expect(response).to be_successful
      end
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      applicant = Applicant.create! valid_attributes
      get :show, params: {id: applicant.to_param}, session: admin_session
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: admin_session
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    context "as an admin" do
      it "returns a success response" do
        applicant = Applicant.create! valid_attributes
        get :edit, params: {id: applicant.to_param}, session: admin_session
        expect(response).to be_successful
      end
    end

    context "as wrong user" do
      it "returns a success response" do
        applicant = Applicant.create! valid_attributes
        get :edit, params: {id: applicant.to_param}, session: user_session2
        expect(response).to redirect_to(show_dash_path)
      end
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Applicant" do
        expect {
          post :create, params: {applicant: valid_attributes}, session: admin_session
        }.to change(Applicant, :count).by(1)
      end

      it "redirects to the created applicant" do
        post :create, params: {applicant: valid_attributes}, session: admin_session
        # expect(response).to redirect_to(/#{Regexp.quote(new_application_path)}.*/)
        expect(response).to redirect_to(calendar_path)
      end
    end

    context "as a new user" do
      it "creates a new Applicant" do
        expect {
          post :create, params: {applicant: valid_attributes}, session: user_session
        }.to change(Applicant, :count).by(1)
      end

      it "redirects to the created applicant" do
        post :create, params: {applicant: valid_attributes}, session: user_session
        # expect(response).to redirect_to(/#{Regexp.quote(new_application_path)}.*/)
        expect(response).to redirect_to(show_dash_path)
      end
    end

    context "with invalid params" do
      it "displays 'new' template" do
        expect {
          post :create, params: {applicant: invalid_attributes}, session: admin_session
        }.to change(Applicant, :count).by(0)
        expect(response).to render_template(:new)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {{
        AName: "Alex Davis",
        AMinor: false,
        SPHomePhone: "5154143123",
        SPAddress: "907 Cross Street",
        SPCity: "College Station",
        SPState: "TX",
        SPZip: "77840",
        SPEmail: "itsjeff@hotmail.net",
        BackgroundCheckCompleted: true,
        BackgroundCheckDate: '2019-04-10'
      }}

      it "updates the requested applicant" do
        applicant = Applicant.create! valid_attributes
        put :update, params: {id: applicant.to_param, applicant: new_attributes}, session: admin_session
        applicant.reload
        expect(controller.notice).to eq('Applicant was successfully updated.')
      end

      it "redirects to the applicant" do
        applicant = Applicant.create! valid_attributes
        put :update, params: {id: applicant.to_param, applicant: new_attributes}, session: admin_session
        expect(response).to redirect_to(applicant)
      end
    end

    context "without a background check date" do
      let(:almost_new_attributes) {{
          AName: "Alex Davis",
          AMinor: false,
          SPHomePhone: "5154143123",
          SPAddress: "907 Cross Street",
          SPCity: "College Station",
          SPState: "TX",
          SPZip: "77840",
          SPEmail: "itsjeff@hotmail.net",
          BackgroundCheckCompleted: "1"
      }}
      it "redirects back to the edit applicant page" do
        applicant = Applicant.create! valid_attributes
        put :update, params: {id: applicant.to_param, applicant: almost_new_attributes}, session: admin_session
        expect(response).to redirect_to(edit_applicant_path(applicant))
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        applicant = Applicant.create! valid_attributes
        put :update, params: {id: applicant.to_param, applicant: invalid_attributes}, session: admin_session
        expect(response).to render_template(:edit)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested applicant" do
      applicant = Applicant.create! valid_attributes
      expect {
        delete :destroy, params: {id: applicant.to_param}, session: admin_session
      }.to change(Applicant, :count).by(-1)
    end

    it "destroys associated bookings" do
      applicant = Applicant.create! valid_attributes
      id = applicant.id
      booking_attributes =
        { applicants_id: id,
          application_id: Application.last.id,
          mercyrooms_id: '1',
          StartDate: '2019-04-22',
          EndDate: '2019-04-26' }

      booking = Booking.create! booking_attributes

      expect {
        delete :destroy, params: {id: applicant.to_param}, session: admin_session
      }.to change(Booking, :count).by(-1)

    end

    it "destroys associated applications" do
      applicant = Applicant.create! valid_attributes
      id = applicant.id

      application_attributes = {
          applicants_id: id,
          HospitalName: 'Mercy',
          DoctorName: 'Dr. Schulls',
          appliedForLongTermHousing: false,
          isFirstVisit: false,
          wantsInfo: false,
          insuranceCoversHousing: false,
          ArrivalDate: '2023-06-08 17:00:00',
          DepartureDate: '2023-06-15 17:00:00'
      }

      application = Application.create! application_attributes

      expect {
        delete :destroy, params: {id: applicant.to_param}, session: admin_session
      }.to change(Application, :count).by(-1)

    end

    it "destroys associated user" do
      applicant = Applicant.create! valid_attributes

      user_attributes ={
          provider: "facebook",
          uid: 107809997065654,
          role: "",
          applicantid: applicant.id
      }

      user = User.create! user_attributes

      expect {
        delete :destroy, params: {id: applicant.to_param}, session: admin_session
      }.to change(User, :count).by(-1)

    end

    it "redirects to the applicants list" do
      applicant = Applicant.create! valid_attributes
      delete :destroy, params: {id: applicant.to_param}, session: admin_session
      expect(response).to redirect_to(applicants_url)
    end
  end

end
